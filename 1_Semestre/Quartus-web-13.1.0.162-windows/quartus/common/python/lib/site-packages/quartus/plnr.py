# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_plnr', [dirname(__file__)])
        except ImportError:
            import _plnr
            return _plnr
        if fp is not None:
            try:
                _mod = imp.load_module('_plnr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _plnr = swig_import_helper()
    del swig_import_helper
else:
    import _plnr
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _plnr.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _plnr.SwigPyIterator_value(self)
    def incr(self, n = 1): return _plnr.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _plnr.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _plnr.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _plnr.SwigPyIterator_equal(self, *args)
    def copy(self): return _plnr.SwigPyIterator_copy(self)
    def next(self): return _plnr.SwigPyIterator_next(self)
    def __next__(self): return _plnr.SwigPyIterator___next__(self)
    def previous(self): return _plnr.SwigPyIterator_previous(self)
    def advance(self, *args): return _plnr.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _plnr.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _plnr.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _plnr.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _plnr.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _plnr.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _plnr.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _plnr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _plnr.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _plnr.LongVector___nonzero__(self)
    def __bool__(self): return _plnr.LongVector___bool__(self)
    def __len__(self): return _plnr.LongVector___len__(self)
    def pop(self): return _plnr.LongVector_pop(self)
    def __getslice__(self, *args): return _plnr.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _plnr.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _plnr.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _plnr.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _plnr.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _plnr.LongVector___setitem__(self, *args)
    def append(self, *args): return _plnr.LongVector_append(self, *args)
    def empty(self): return _plnr.LongVector_empty(self)
    def size(self): return _plnr.LongVector_size(self)
    def clear(self): return _plnr.LongVector_clear(self)
    def swap(self, *args): return _plnr.LongVector_swap(self, *args)
    def get_allocator(self): return _plnr.LongVector_get_allocator(self)
    def begin(self): return _plnr.LongVector_begin(self)
    def end(self): return _plnr.LongVector_end(self)
    def rbegin(self): return _plnr.LongVector_rbegin(self)
    def rend(self): return _plnr.LongVector_rend(self)
    def pop_back(self): return _plnr.LongVector_pop_back(self)
    def erase(self, *args): return _plnr.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _plnr.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _plnr.LongVector_push_back(self, *args)
    def front(self): return _plnr.LongVector_front(self)
    def back(self): return _plnr.LongVector_back(self)
    def assign(self, *args): return _plnr.LongVector_assign(self, *args)
    def resize(self, *args): return _plnr.LongVector_resize(self, *args)
    def insert(self, *args): return _plnr.LongVector_insert(self, *args)
    def reserve(self, *args): return _plnr.LongVector_reserve(self, *args)
    def capacity(self): return _plnr.LongVector_capacity(self)
    __swig_destroy__ = _plnr.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _plnr.LongVector_swigregister
LongVector_swigregister(LongVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _plnr.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _plnr.IntVector___nonzero__(self)
    def __bool__(self): return _plnr.IntVector___bool__(self)
    def __len__(self): return _plnr.IntVector___len__(self)
    def pop(self): return _plnr.IntVector_pop(self)
    def __getslice__(self, *args): return _plnr.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _plnr.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _plnr.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _plnr.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _plnr.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _plnr.IntVector___setitem__(self, *args)
    def append(self, *args): return _plnr.IntVector_append(self, *args)
    def empty(self): return _plnr.IntVector_empty(self)
    def size(self): return _plnr.IntVector_size(self)
    def clear(self): return _plnr.IntVector_clear(self)
    def swap(self, *args): return _plnr.IntVector_swap(self, *args)
    def get_allocator(self): return _plnr.IntVector_get_allocator(self)
    def begin(self): return _plnr.IntVector_begin(self)
    def end(self): return _plnr.IntVector_end(self)
    def rbegin(self): return _plnr.IntVector_rbegin(self)
    def rend(self): return _plnr.IntVector_rend(self)
    def pop_back(self): return _plnr.IntVector_pop_back(self)
    def erase(self, *args): return _plnr.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _plnr.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _plnr.IntVector_push_back(self, *args)
    def front(self): return _plnr.IntVector_front(self)
    def back(self): return _plnr.IntVector_back(self)
    def assign(self, *args): return _plnr.IntVector_assign(self, *args)
    def resize(self, *args): return _plnr.IntVector_resize(self, *args)
    def insert(self, *args): return _plnr.IntVector_insert(self, *args)
    def reserve(self, *args): return _plnr.IntVector_reserve(self, *args)
    def capacity(self): return _plnr.IntVector_capacity(self)
    __swig_destroy__ = _plnr.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _plnr.IntVector_swigregister
IntVector_swigregister(IntVector)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _plnr.StrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _plnr.StrVector___nonzero__(self)
    def __bool__(self): return _plnr.StrVector___bool__(self)
    def __len__(self): return _plnr.StrVector___len__(self)
    def pop(self): return _plnr.StrVector_pop(self)
    def __getslice__(self, *args): return _plnr.StrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _plnr.StrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _plnr.StrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _plnr.StrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _plnr.StrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _plnr.StrVector___setitem__(self, *args)
    def append(self, *args): return _plnr.StrVector_append(self, *args)
    def empty(self): return _plnr.StrVector_empty(self)
    def size(self): return _plnr.StrVector_size(self)
    def clear(self): return _plnr.StrVector_clear(self)
    def swap(self, *args): return _plnr.StrVector_swap(self, *args)
    def get_allocator(self): return _plnr.StrVector_get_allocator(self)
    def begin(self): return _plnr.StrVector_begin(self)
    def end(self): return _plnr.StrVector_end(self)
    def rbegin(self): return _plnr.StrVector_rbegin(self)
    def rend(self): return _plnr.StrVector_rend(self)
    def pop_back(self): return _plnr.StrVector_pop_back(self)
    def erase(self, *args): return _plnr.StrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _plnr.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _plnr.StrVector_push_back(self, *args)
    def front(self): return _plnr.StrVector_front(self)
    def back(self): return _plnr.StrVector_back(self)
    def assign(self, *args): return _plnr.StrVector_assign(self, *args)
    def resize(self, *args): return _plnr.StrVector_resize(self, *args)
    def insert(self, *args): return _plnr.StrVector_insert(self, *args)
    def reserve(self, *args): return _plnr.StrVector_reserve(self, *args)
    def capacity(self): return _plnr.StrVector_capacity(self)
    __swig_destroy__ = _plnr.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _plnr.StrVector_swigregister
StrVector_swigregister(StrVector)


def is_being_initialized():
  """is_being_initialized() -> bool"""
  return _plnr.is_being_initialized()

def is_initialized():
  """is_initialized() -> bool"""
  return _plnr.is_initialized()

def shutdown_planner():
  """shutdown_planner() -> bool"""
  return _plnr.shutdown_planner()

def get_status_messages(*args):
  """
    get_status_messages(long start_msg_idx) -> SWIG_STL_STRING_VEC
    Parameters:
       start_msg_idx: long value

       start_msg_idx: long value

    """
  return _plnr.get_status_messages(*args)

def export_design_and_device(*args):
  """
    export_design_and_device(SWIG_STL_STRING filename) -> bool
    Parameters:
       filename: SWIG_STL_STRING value

       filename: SWIG_STL_STRING value

    """
  return _plnr.export_design_and_device(*args)

def get_device_views():
  """get_device_views() -> SWIG_STL_LONG_VEC"""
  return _plnr.get_device_views()

def get_device_view_info(*args):
  """
    get_device_view_info(long view_id) -> SWIG_STL_STRING
    Parameters:
       view_id: long value

       view_id: long value

    """
  return _plnr.get_device_view_info(*args)

def get_device_view(*args):
  """
    get_device_view(long view_id) -> SWIG_STL_STRING
    Parameters:
       view_id: long value

       view_id: long value

    """
  return _plnr.get_device_view(*args)

def is_legal_device_view_id(*args):
  """
    is_legal_device_view_id(long view_id) -> bool
    Parameters:
       view_id: long value

       view_id: long value

    """
  return _plnr.is_legal_device_view_id(*args)

def get_device_view_layers(*args):
  """
    get_device_view_layers(long view_id) -> SWIG_STL_LONG_VEC
    Parameters:
       view_id: long value

       view_id: long value

    """
  return _plnr.get_device_view_layers(*args)

def get_device_view_layer_info(*args):
  """
    get_device_view_layer_info(long view_id, long layer_id) -> SWIG_STL_STRING
    Parameters:
       view_id: long value
       layer_id: long value

       view_id: long value
       layer_id: long value

    """
  return _plnr.get_device_view_layer_info(*args)

def get_device_view_layer(*args):
  """
    get_device_view_layer(long view_id, long layer_id) -> SWIG_STL_STRING
    Parameters:
       view_id: long value
       layer_id: long value

       view_id: long value
       layer_id: long value

    """
  return _plnr.get_device_view_layer(*args)

def get_block_types():
  """get_block_types() -> SWIG_STL_STRING_VEC"""
  return _plnr.get_block_types()

def is_legal_block_type(*args):
  """
    is_legal_block_type(SWIG_STL_STRING type) -> bool
    Parameters:
       type: SWIG_STL_STRING value

       type: SWIG_STL_STRING value

    """
  return _plnr.is_legal_block_type(*args)

def is_legal_resource_type(*args):
  """
    is_legal_resource_type(SWIG_STL_STRING type) -> bool
    Parameters:
       type: SWIG_STL_STRING value

       type: SWIG_STL_STRING value

    """
  return _plnr.is_legal_resource_type(*args)

def get_block_ids_for_view(*args):
  """
    get_block_ids_for_view(long view_id) -> SWIG_STL_LONG_VEC
    Parameters:
       view_id: long value

       view_id: long value

    """
  return _plnr.get_block_ids_for_view(*args)

def get_block_info(*args):
  """
    get_block_info(long block_id) -> SWIG_STL_STRING
    Parameters:
       block_id: long value

       block_id: long value

    """
  return _plnr.get_block_info(*args)

def is_legal_block_id(*args):
  """
    is_legal_block_id(long block_id) -> bool
    Parameters:
       block_id: long value

       block_id: long value

    """
  return _plnr.is_legal_block_id(*args)

def create_blackbox_design_block():
  """create_blackbox_design_block() -> long"""
  return _plnr.create_blackbox_design_block()

def update_design_block_estimates(*args):
  """
    update_design_block_estimates(long block_id, SWIG_STL_STRING resource_name, long qty) -> bool
    Parameters:
       block_id: long value
       resource_name: SWIG_STL_STRING value
       qty: long value

       block_id: long value
       resource_name: SWIG_STL_STRING value
       qty: long value

    """
  return _plnr.update_design_block_estimates(*args)

def get_device_location_types():
  """get_device_location_types() -> SWIG_STL_STRING_VEC"""
  return _plnr.get_device_location_types()

def get_device_location_info(*args):
  """
    get_device_location_info(long location_id) -> SWIG_STL_STRING
    Parameters:
       location_id: long value

       location_id: long value

    """
  return _plnr.get_device_location_info(*args)

def is_legal_device_location_id(*args):
  """
    is_legal_device_location_id(long location_id) -> bool
    Parameters:
       location_id: long value

       location_id: long value

    """
  return _plnr.is_legal_device_location_id(*args)

def check_device_locations_satisfies_design_block(*args):
  """
    check_device_locations_satisfies_design_block(long block_id, SWIG_STL_LONG_VEC location_ids) -> bool
    Parameters:
       block_id: long value
       location_ids: SWIG_STL_LONG_VEC value

       block_id: long value
       location_ids: SWIG_STL_LONG_VEC value

    """
  return _plnr.check_device_locations_satisfies_design_block(*args)

def place_design_block(*args):
  """
    place_design_block(long block_id, SWIG_STL_LONG_VEC location_ids) -> bool
    Parameters:
       block_id: long value
       location_ids: SWIG_STL_LONG_VEC value

       block_id: long value
       location_ids: SWIG_STL_LONG_VEC value

    """
  return _plnr.place_design_block(*args)

def unplace_design_block(*args):
  """
    unplace_design_block(long block_id)
    Parameters:
       block_id: long value

       block_id: long value

    """
  return _plnr.unplace_design_block(*args)
def get_device_view_info(view_id) :
	import json
	dict_str = _plnr.get_device_view_info(view_id)
	dict_json = json.loads(dict_str)
	return dict_json

def get_block_info(block_id) :
	import json
	dict_str = _plnr.get_block_info(block_id)
	dict_json = json.loads(dict_str)
	return dict_json

def get_device_location_info(location_id) :
	import json
	dict_str = _plnr.get_device_location_info(location_id)
	dict_json = json.loads(dict_str)
	return dict_json

# This file is compatible with both classic and new-style classes.


def initialize_planner(webserver_mode = False):
  """
    initialize_planner(bool webserver_mode = False) -> bool
    Parameters:
       webserver_mode: bool value

       webserver_mode: bool value

       webserver_mode: bool value

       webserver_mode: bool value

    initialize_planner() -> bool
    """
  return _plnr.initialize_planner(webserver_mode)

def get_blocks(*args):
  """
    get_blocks() -> SWIG_STL_LONG_VEC
    get_blocks(SWIG_STL_STRING_VEC swig_type_vec) -> SWIG_STL_LONG_VEC
    Parameters:
       swig_type_vec: SWIG_STL_STRING_VEC value

       swig_type_vec: SWIG_STL_STRING_VEC value

    """
  return _plnr.get_blocks(*args)

def get_device_locations(*args):
  """
    get_device_locations() -> SWIG_STL_LONG_VEC
    get_device_locations(SWIG_STL_STRING_VEC swig_type_vec) -> SWIG_STL_LONG_VEC
    Parameters:
       swig_type_vec: SWIG_STL_STRING_VEC value

       swig_type_vec: SWIG_STL_STRING_VEC value

    """
  return _plnr.get_device_locations(*args)

