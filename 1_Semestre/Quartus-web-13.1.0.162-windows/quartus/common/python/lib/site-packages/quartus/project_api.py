# Copyright 2013 Altera Corporation.
# $Header: //acds/rel/13.1/quartus/ccl/py/project_api.py#1 $

"""
Bottle routes for project API
"""

__author__ = "Richard Calvi (rcalvi@altera.com)"
__version__ = "$Revision: #1 $"
__date__ = "$Date: 2013/08/11 $"
__copyright__ = "Copyright 2013 Altera Corporation."


from bottle import route, get, post, request
from quartus.tlock import thread_lock
from quartus.broker import BROKER

VERSION = "v1"

@thread_lock
def list_projects():
    # TODO: Remove this once it's no longer necessary
    from quartus import dll_loader
    dll_loader.load('sys_proj_project')

    from quartus import project
    project_file_list = project.list_projects()
    return project_file_list


@route("/api/%s/project/<filepath:path>" % VERSION)
@thread_lock
def open_project(filepath):
    # TODO: Remove this once it's no longer necessary
    from quartus import dll_loader
    dll_loader.load('sys_proj_project')
    dll_loader.load('comp_qhd_qhd')

    from quartus import project
    from quartus import qhd

    success = qhd.open_project(filepath)
    project_status = { 'success' : success }

    BROKER.register_project(filepath)

    return project_status


@thread_lock
def close_project():
    # TODO: Remove this once it's no longer necessary
    from quartus import dll_loader
    dll_loader.load('comp_qhd_qhd')

    from quartus import qhd

    result = qhd.close_project()
    return {'success' : result}


@thread_lock
def get_current_project():
    # TODO: Remove this once it's no longer necessary
    from quartus import dll_loader
    dll_loader.load('comp_qhd_qhd')
    
    from quartus import qhd
    
    project_name = qhd.get_current_project_name()
    result = { }
    if project_name:
        result['name'] = project_name
        result['path'] = qhd.get_current_project_path()
        
    return result


@thread_lock
def set_default_revision(revision):
    # TODO: Remove this once it's no longer necessary
    from quartus import dll_loader
    dll_loader.load('comp_qhd_qhd')

    from quartus import qhd

    success = qhd.set_default_revision(revision)
    status = { 'success' : success }

    return status


@thread_lock
def get_default_revision():
    # TODO: Remove this once it's no longer necessary
    from quartus import dll_loader
    dll_loader.load('comp_qhd_qhd')

    from quartus import qhd

    return qhd.get_default_revision()


@get("/api/%s/project/" % VERSION)
@thread_lock
def route_project_commands():
    action = request.query.action
    if action:
        if action == 'close':
            return close_project()
        elif action == 'get_current':
            return get_current_project()
        elif action == 'set_revision':
            revision = request.query.name
            return set_default_revision(revision)
        elif action == 'get_revision':
            return get_default_revision()
        else:
            return 'Unrecognized action: ' + action
    else:
        return list_projects()

