# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_project', [dirname(__file__)])
        except ImportError:
            import _project
            return _project
        if fp is not None:
            try:
                _mod = imp.load_module('_project', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _project = swig_import_helper()
    del swig_import_helper
else:
    import _project
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def open_project(*args) -> "char const *" :
  """
    open_project(project_name) -> status_code

    Opens the project with the specified name and returns a status code string

    """
  return _project.open_project(*args)

def close_project() -> "bool" :
  """
    close_project() -> status

    Closes the currently open project and returns True if successful

    """
  return _project.close_project()

def is_project_open() -> "bool" :
  """
    is_project_open() -> bool

    Returns true if a project is currently open

    """
  return _project.is_project_open()

def list_projects() -> "std::string const" :
  """
    list_projects() -> json_list

    Returns a json-formatted list of project filenames in the current directory

    """
  return _project.list_projects()
# This file is compatible with both classic and new-style classes.


