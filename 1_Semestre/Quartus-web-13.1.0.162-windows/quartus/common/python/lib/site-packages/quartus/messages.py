# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_messages', [dirname(__file__)])
        except ImportError:
            import _messages
            return _messages
        if fp is not None:
            try:
                _mod = imp.load_module('_messages', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _messages = swig_import_helper()
    del swig_import_helper
else:
    import _messages
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def swap_in_sqlite_display() -> "void" :
  """
    swap_in_sqlite_display()

    Swaps in the new msg display with sqlite backend

    """
  return _messages.swap_in_sqlite_display()

def set_up_read_only_sqlite_display(*args) -> "void" :
  """
    set_up_read_only_sqlite_display(char file_name)
    Parameters:
       file_name: char const * value

       file_name: char const * value

    """
  return _messages.set_up_read_only_sqlite_display(*args)

def send_all_messages_to_sqlite_db(*args) -> "void" :
  """
    send_all_messages_to_sqlite_db(char file_name)
    Parameters:
       file_name: char const * value

       file_name: char const * value

    """
  return _messages.send_all_messages_to_sqlite_db(*args)

def post_debug(*args) -> "void" :
  """
    post_debug(char message_text)
    Parameters:
       message_text: char const * value

       message_text: char const * value

    """
  return _messages.post_debug(*args)

def post_info(*args) -> "void" :
  """
    post_info(char message_text)
    Parameters:
       message_text: char const * value

       message_text: char const * value

    """
  return _messages.post_info(*args)

def post_warning(*args) -> "void" :
  """
    post_warning(char message_text)
    Parameters:
       message_text: char const * value

       message_text: char const * value

    """
  return _messages.post_warning(*args)

def post_critical_warning(*args) -> "void" :
  """
    post_critical_warning(char message_text)
    Parameters:
       message_text: char const * value

       message_text: char const * value

    """
  return _messages.post_critical_warning(*args)

def post_error(*args) -> "void" :
  """
    post_error(char message_text)
    Parameters:
       message_text: char const * value

       message_text: char const * value

    """
  return _messages.post_error(*args)

def poll_messages(*args) -> "void" :
  """
    poll_messages(int lower_bound, int upper_bound)
    Parameters:
       lower_bound: int value
       upper_bound: int value

       lower_bound: int value
       upper_bound: int value

    """
  return _messages.poll_messages(*args)
# This file is compatible with both classic and new-style classes.


