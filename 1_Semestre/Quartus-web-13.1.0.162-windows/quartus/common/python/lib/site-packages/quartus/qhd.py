# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_qhd', [dirname(__file__)])
        except ImportError:
            import _qhd
            return _qhd
        if fp is not None:
            try:
                _mod = imp.load_module('_qhd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _qhd = swig_import_helper()
    del swig_import_helper
else:
    import _qhd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def open_project(*args):
  """
    open_project(project_path) -> success?

    Opens the given project, returning true iff the project was opened.

    """
  return _qhd.open_project(*args)

def get_current_project_name():
  """
    get_current_project_name() -> project name

    Gets the currently open project name, or the empty string if no project is currently open.

    """
  return _qhd.get_current_project_name()

def is_project_open():
  """
    is_project_open() -> project open?

    Returns true if there is a currently open project, false otherwise.

    """
  return _qhd.is_project_open()

def get_current_project_path():
  """
    get_current_project_path() -> project path

    Gets the currently open project path, or the empty string if no project is currently open.

    """
  return _qhd.get_current_project_path()

def close_project():
  """
    close_project() -> success?

    Closes the currently open project, returning true iff succeeded.

    """
  return _qhd.close_project()

def set_default_revision(*args):
  """
    set_default_revision(revision_name) -> success?

    Sets the default revision for the currently opened project, returning true iff succeeded.

    """
  return _qhd.set_default_revision(*args)

def get_default_revision():
  """
    get_default_revision() -> revision_name

    Gets the default revision for the currently opened project.

    """
  return _qhd.get_default_revision()

def start_flow(*args):
  """
    start_flow(flow_name, json_options) -> flow_id

    Returns flow id after starting the given flow in the currently opened project using the given options (in JSON format).  If an error occurs in starting the flow, an exception is thrown.

    """
  return _qhd.start_flow(*args)

def get_flow_status(*args):
  """
    get_flow_status(flow_id) -> json data corresponding to flow record

    Returns flow record data corresponding to the given ID.

    """
  return _qhd.get_flow_status(*args)

def get_flow_simple_state(*args):
  """
    get_flow_simple_state(flow_id) -> simple state string (in json format) corresponding to flow record

    Returns simple state for the given flow ID. One of: pending/running/done/does_not_exist.

    """
  return _qhd.get_flow_simple_state(*args)

def get_all_flow_status():
  """
    get_all_flow_status() -> json data corresponding to all flow records

    Returns flow record data for all running flows.

    """
  return _qhd.get_all_flow_status()

def get_all_user_partitions():
  """
    get_all_user_partitions() -> JSON data for all partitions in the current revision

    Returns array of user partition records.

    """
  return _qhd.get_all_user_partitions()

def get_all_user_partitions_hierarchy():
  """
    get_all_user_partitions_hierarchy() -> JSON data for all partitions in the current revision in a hierarchical format convenient for tree display

    Returns hierarchical tree of user partition records.

    """
  return _qhd.get_all_user_partitions_hierarchy()

def get_available_partition_snapshots(*args):
  """
    get_available_partition_snapshots(partition_id) -> JSON data for all partitions snapshots in the current revision

    Returns array of snapshot records for the given partition.

    """
  return _qhd.get_available_partition_snapshots(*args)

def report_partition_resources(*args):
  """
    report_partition_resources(partition_id, snapshot, iteration) -> JSON data for resources in a snapshot iteration

    Returns resource counts the partition's snapshot iteration.

    """
  return _qhd.report_partition_resources(*args)

def get_partition_names(*args):
  """
    get_partition_names(partition_id, snapshot, iteration) -> JSON data for names in a snapshot iteration

    Returns logical name tree in a snapshot iteration.

    """
  return _qhd.get_partition_names(*args)

def create_partition(*args):
  """
    create_partition(hpath, user_name) -> JSON data for new partition or error

    Create a new partition with given hpath and user name.

    """
  return _qhd.create_partition(*args)

def get_options_on_name(*args):
  """
    get_options_on_name(partition_id, snapshot, iteration, name_id) -> JSON data for options on the given name resource

    Get array of options on a name.

    """
  return _qhd.get_options_on_name(*args)

def resolve_option_on_name(*args):
  """
    resolve_option_on_name(partition_id, snapshot, iteration, name_id, option_name) -> JSON data for an option on a name

    Get array of options on a name.

    """
  return _qhd.resolve_option_on_name(*args)

def get_flow_machine_info(*args):
  """
    get_flow_machine_info(flow_id) -> machine info

    Returns information about the machine running the flow with the given flow ID.

    """
  return _qhd.get_flow_machine_info(*args)

def get_flow_partition_info(*args):
  """
    get_flow_partition_info(flow_id) -> partition info

    Returns information about the partition which the given flow is running.

    """
  return _qhd.get_flow_partition_info(*args)

def login_to_broker(*args):
  """
    login_to_broker(broker_url, username, password) -> success?

    Logs in to the given broker using the given username and password (uses pre-existing login if nothing has changed).

    """
  return _qhd.login_to_broker(*args)
# This file is compatible with both classic and new-style classes.


def get_logical_hierarchy(root_partition = ""):
  """
    get_logical_hierarchy(root_partition) -> JSON data for all partitions and logical instances in the current revision under (and including) the given root partition in a hierarchical format convenient for tree display
    get_logical_hierarchy(root_partition) -> JSON data for all partitions and logical instances in the current revision under (and including) the given root partition in a hierarchical format convenient for tree display

    Returns hierarchical tree of user partition and logical instance records that exist under the given root partition (or under the root if no root partition or the empty string is given).  The root partition is included in the tree.

    """
  return _qhd.get_logical_hierarchy(root_partition)

def get_flow_messages(*args):
  """
    get_flow_messages(flow_id, start_message_id, end_message_id) -> json data corresponding to messages
    get_flow_messages(flow_id, start_message_id, end_message_id) -> json data corresponding to messages
    get_flow_messages(flow_id, start_message_id, end_message_id) -> json data corresponding to messages

    Returns flow messages corresponding to the given ID, starting from the given start message ID (if given) and ending on the given end message ID (inclusive, if given).

    """
  return _qhd.get_flow_messages(*args)

