# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyswig', [dirname(__file__)])
        except ImportError:
            import _pyswig
            return _pyswig
        if fp is not None:
            try:
                _mod = imp.load_module('_pyswig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyswig = swig_import_helper()
    del swig_import_helper
else:
    import _pyswig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyswig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyswig.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyswig.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyswig.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyswig.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyswig.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyswig.SwigPyIterator_copy(self)
    def next(self): return _pyswig.SwigPyIterator_next(self)
    def __next__(self): return _pyswig.SwigPyIterator___next__(self)
    def previous(self): return _pyswig.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyswig.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyswig.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyswig.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyswig.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyswig.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyswig.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyswig.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyswig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyswig.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyswig.LongVector___nonzero__(self)
    def __bool__(self): return _pyswig.LongVector___bool__(self)
    def __len__(self): return _pyswig.LongVector___len__(self)
    def pop(self): return _pyswig.LongVector_pop(self)
    def __getslice__(self, *args): return _pyswig.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyswig.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyswig.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyswig.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyswig.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyswig.LongVector___setitem__(self, *args)
    def append(self, *args): return _pyswig.LongVector_append(self, *args)
    def empty(self): return _pyswig.LongVector_empty(self)
    def size(self): return _pyswig.LongVector_size(self)
    def clear(self): return _pyswig.LongVector_clear(self)
    def swap(self, *args): return _pyswig.LongVector_swap(self, *args)
    def get_allocator(self): return _pyswig.LongVector_get_allocator(self)
    def begin(self): return _pyswig.LongVector_begin(self)
    def end(self): return _pyswig.LongVector_end(self)
    def rbegin(self): return _pyswig.LongVector_rbegin(self)
    def rend(self): return _pyswig.LongVector_rend(self)
    def pop_back(self): return _pyswig.LongVector_pop_back(self)
    def erase(self, *args): return _pyswig.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyswig.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyswig.LongVector_push_back(self, *args)
    def front(self): return _pyswig.LongVector_front(self)
    def back(self): return _pyswig.LongVector_back(self)
    def assign(self, *args): return _pyswig.LongVector_assign(self, *args)
    def resize(self, *args): return _pyswig.LongVector_resize(self, *args)
    def insert(self, *args): return _pyswig.LongVector_insert(self, *args)
    def reserve(self, *args): return _pyswig.LongVector_reserve(self, *args)
    def capacity(self): return _pyswig.LongVector_capacity(self)
    __swig_destroy__ = _pyswig.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _pyswig.LongVector_swigregister
LongVector_swigregister(LongVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyswig.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyswig.IntVector___nonzero__(self)
    def __bool__(self): return _pyswig.IntVector___bool__(self)
    def __len__(self): return _pyswig.IntVector___len__(self)
    def pop(self): return _pyswig.IntVector_pop(self)
    def __getslice__(self, *args): return _pyswig.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyswig.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyswig.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyswig.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyswig.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyswig.IntVector___setitem__(self, *args)
    def append(self, *args): return _pyswig.IntVector_append(self, *args)
    def empty(self): return _pyswig.IntVector_empty(self)
    def size(self): return _pyswig.IntVector_size(self)
    def clear(self): return _pyswig.IntVector_clear(self)
    def swap(self, *args): return _pyswig.IntVector_swap(self, *args)
    def get_allocator(self): return _pyswig.IntVector_get_allocator(self)
    def begin(self): return _pyswig.IntVector_begin(self)
    def end(self): return _pyswig.IntVector_end(self)
    def rbegin(self): return _pyswig.IntVector_rbegin(self)
    def rend(self): return _pyswig.IntVector_rend(self)
    def pop_back(self): return _pyswig.IntVector_pop_back(self)
    def erase(self, *args): return _pyswig.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyswig.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyswig.IntVector_push_back(self, *args)
    def front(self): return _pyswig.IntVector_front(self)
    def back(self): return _pyswig.IntVector_back(self)
    def assign(self, *args): return _pyswig.IntVector_assign(self, *args)
    def resize(self, *args): return _pyswig.IntVector_resize(self, *args)
    def insert(self, *args): return _pyswig.IntVector_insert(self, *args)
    def reserve(self, *args): return _pyswig.IntVector_reserve(self, *args)
    def capacity(self): return _pyswig.IntVector_capacity(self)
    __swig_destroy__ = _pyswig.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pyswig.IntVector_swigregister
IntVector_swigregister(IntVector)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyswig.StrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyswig.StrVector___nonzero__(self)
    def __bool__(self): return _pyswig.StrVector___bool__(self)
    def __len__(self): return _pyswig.StrVector___len__(self)
    def pop(self): return _pyswig.StrVector_pop(self)
    def __getslice__(self, *args): return _pyswig.StrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyswig.StrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyswig.StrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyswig.StrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyswig.StrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyswig.StrVector___setitem__(self, *args)
    def append(self, *args): return _pyswig.StrVector_append(self, *args)
    def empty(self): return _pyswig.StrVector_empty(self)
    def size(self): return _pyswig.StrVector_size(self)
    def clear(self): return _pyswig.StrVector_clear(self)
    def swap(self, *args): return _pyswig.StrVector_swap(self, *args)
    def get_allocator(self): return _pyswig.StrVector_get_allocator(self)
    def begin(self): return _pyswig.StrVector_begin(self)
    def end(self): return _pyswig.StrVector_end(self)
    def rbegin(self): return _pyswig.StrVector_rbegin(self)
    def rend(self): return _pyswig.StrVector_rend(self)
    def pop_back(self): return _pyswig.StrVector_pop_back(self)
    def erase(self, *args): return _pyswig.StrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyswig.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyswig.StrVector_push_back(self, *args)
    def front(self): return _pyswig.StrVector_front(self)
    def back(self): return _pyswig.StrVector_back(self)
    def assign(self, *args): return _pyswig.StrVector_assign(self, *args)
    def resize(self, *args): return _pyswig.StrVector_resize(self, *args)
    def insert(self, *args): return _pyswig.StrVector_insert(self, *args)
    def reserve(self, *args): return _pyswig.StrVector_reserve(self, *args)
    def capacity(self): return _pyswig.StrVector_capacity(self)
    __swig_destroy__ = _pyswig.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _pyswig.StrVector_swigregister
StrVector_swigregister(StrVector)


def get_random_long():
  """get_random_long() -> long"""
  return _pyswig.get_random_long()

def pass_random_long(*args):
  """
    pass_random_long(long res) -> bool
    Parameters:
       res: long value

       res: long value

    """
  return _pyswig.pass_random_long(*args)

def get_longs_vector():
  """get_longs_vector() -> SWIG_STL_LONG_VEC"""
  return _pyswig.get_longs_vector()

def pass_longs_vector(*args):
  """
    pass_longs_vector(SWIG_STL_LONG_VEC long_vec, int length) -> bool
    Parameters:
       long_vec: SWIG_STL_LONG_VEC value
       length: int value

       long_vec: SWIG_STL_LONG_VEC value
       length: int value

    """
  return _pyswig.pass_longs_vector(*args)

def pass_const_longs_vector(*args):
  """
    pass_const_longs_vector(SWIG_STL_LONG_VEC long_vec, int length) -> bool
    Parameters:
       long_vec: SWIG_STL_LONG_VEC const value
       length: int value

       long_vec: SWIG_STL_LONG_VEC const value
       length: int value

    """
  return _pyswig.pass_const_longs_vector(*args)

def get_random_int():
  """get_random_int() -> int"""
  return _pyswig.get_random_int()

def pass_random_int(*args):
  """
    pass_random_int(int res) -> bool
    Parameters:
       res: int value

       res: int value

    """
  return _pyswig.pass_random_int(*args)

def get_ints_vector():
  """get_ints_vector() -> SWIG_STL_INT_VEC"""
  return _pyswig.get_ints_vector()

def pass_ints_vector(*args):
  """
    pass_ints_vector(SWIG_STL_INT_VEC long_vec, int length) -> bool
    Parameters:
       long_vec: SWIG_STL_INT_VEC value
       length: int value

       long_vec: SWIG_STL_INT_VEC value
       length: int value

    """
  return _pyswig.pass_ints_vector(*args)

def pass_const_ints_vector(*args):
  """
    pass_const_ints_vector(SWIG_STL_INT_VEC long_vec, int length) -> bool
    Parameters:
       long_vec: SWIG_STL_INT_VEC const value
       length: int value

       long_vec: SWIG_STL_INT_VEC const value
       length: int value

    """
  return _pyswig.pass_const_ints_vector(*args)

def get_random_string():
  """get_random_string() -> SWIG_STL_STRING"""
  return _pyswig.get_random_string()

def pass_random_string(*args):
  """
    pass_random_string(SWIG_STL_STRING res) -> bool
    Parameters:
       res: SWIG_STL_STRING value

       res: SWIG_STL_STRING value

    """
  return _pyswig.pass_random_string(*args)

def get_string_vector():
  """get_string_vector() -> SWIG_STL_STRING_VEC"""
  return _pyswig.get_string_vector()

def pass_string_vector(*args):
  """
    pass_string_vector(SWIG_STL_STRING_VEC string_vec, int length) -> bool
    Parameters:
       string_vec: SWIG_STL_STRING_VEC value
       length: int value

       string_vec: SWIG_STL_STRING_VEC value
       length: int value

    """
  return _pyswig.pass_string_vector(*args)

def pass_const_string_vector(*args):
  """
    pass_const_string_vector(SWIG_STL_STRING_VEC string_vec, int length) -> bool
    Parameters:
       string_vec: SWIG_STL_STRING_VEC const value
       length: int value

       string_vec: SWIG_STL_STRING_VEC const value
       length: int value

    """
  return _pyswig.pass_const_string_vector(*args)

def get_python_dict():
  """get_python_dict() -> SWIG_STL_STRING"""
  return _pyswig.get_python_dict()

def pass_python_dict(*args):
  """
    pass_python_dict(SWIG_STL_STRING dict_str) -> bool
    Parameters:
       dict_str: SWIG_STL_STRING value

       dict_str: SWIG_STL_STRING value

    """
  return _pyswig.pass_python_dict(*args)

def throw_runtime_exception_when_zero(*args):
  """
    throw_runtime_exception_when_zero(long inlong) -> bool
    Parameters:
       inlong: long const value

       inlong: long const value

    """
  return _pyswig.throw_runtime_exception_when_zero(*args)

def throw_value_exception_when_zero(*args):
  """
    throw_value_exception_when_zero(long inlong) -> bool
    Parameters:
       inlong: long const value

       inlong: long const value

    """
  return _pyswig.throw_value_exception_when_zero(*args)
def get_python_dict() :
	import json
	dict_str = _pyswig.get_python_dict()
	dict_json = json.loads(dict_str)
	return dict_json

def pass_python_dict(py_dict) :
	import json
	dict_str = json.dumps(py_dict) 
	result = _pyswig.pass_python_dict(dict_str)
	return result

# This file is compatible with both classic and new-style classes.


