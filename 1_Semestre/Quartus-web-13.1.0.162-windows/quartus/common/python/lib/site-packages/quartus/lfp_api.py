# Copyright 2013 Altera Corporation.
# $Header: //acds/rel/13.1/quartus/ccl/py/lfp_api.py#1 $

"""
Bottle routes for Logical Floorplanner API
"""

__author__ = "Kalen Brunham (kbrunham@altera.com)"
__version__ = "$Revision: #1 $"
__date__ = "$Date: 2013/08/11 $"
__copyright__ = "Copyright 2013 Altera Corporation."


from bottle import route, get, post, request, abort, response, sys

from quartus.tlock import thread_lock

VERSION = "v1.0"

@get("/api/%s/lfp" % VERSION)
@thread_lock
def lfp_api_list():

    api_list = {
        "version" : VERSION,
        "api" : []
    }

    api_list["api"].append({
        "name" : "/api/%s/lfp" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/config" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/status" % VERSION,
        "method" : ["GET", "POST"]
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/device_views" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/device_views/<view_id:int>" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/device_views/<view_id:int>/layers" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/device_views/<view_id:int>/layers/<layer_id:int>" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/device_locations" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/device_locations/<dev_loc_id:int>" % VERSION,
        "method" : ["GET"]
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/blocks" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/blocks/<block_id:int>" % VERSION,
        "method" : ["GET", "POST"]
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/pcells" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/pcells/<pcell_id:int>" % VERSION,
        "method" : ["GET", "POST"]
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/pcell_locations" % VERSION,
        "method" : "GET"
    })
    api_list["api"].append({
        "name" : "/api/%s/lfp/pcell_locations/<pcell_loc_id:int>" % VERSION,
        "method" : ["GET"]
    })

    return api_list

@get("/api/%s/lfp/config" % VERSION)
@thread_lock
def lfp_status():

    status_config = {
        "tool_config" : [],
    }
    status_config["tool_config"].append({
         "name" : "IS_EARLY_PLANNER",
         "value" : False
    })
    
    return status_config

@get("/api/%s/lfp/status" % VERSION)
@thread_lock
def lfp_status():
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    status = {
        "project_open" : qhd.is_project_open(),
        "initialized" : plnr.is_initialized(),
        "being_initialized" : plnr.is_being_initialized(),
        "messages" : []
    }
    
    msg_idx = request.query.getall('start_msg_idx')
    
    if (len(msg_idx) > 0):
        if (len(msg_idx) != 1):
            abort(400, "Only 1 message index can be supplied")
        else:
            messages = plnr.get_status_messages(int(msg_idx[0]))
            for msg in messages:
                status["messages"].append({
                    "text" : msg
                })

    
    return status

@post("/api/%s/lfp/status" % VERSION)
@thread_lock
def lfp_do_status_action():
    """
    Initialize or shutdown the logical floorplanner
    """
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    import datetime
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    try:
        status_condition = {}
        
        action = request.forms.get('action',None)
        
        if (action == "initialize"):
            if (not plnr.is_initialized()):
                if (plnr.initialize_planner(True)):
                    # Set result as command accepted
                    response.status = 202

                    status_condition = {
                        "being_initialized" : True,
                        "initialized" :False,
                        "link" : "/api/%s/lfp/status" % VERSION,
                        "ping_after" : str(datetime.datetime.now()+datetime.timedelta(seconds=10)),
                        "start_msg_idx" : 0
                    }
                
                else:
                    abort(500, "Unexpected planner shutdown failure")
            else:
                status_condition = {
                    "being_initialized" : False,
                    "initialized" : True
                }
                
        elif (action == "shutdown"):
            if (not plnr.is_initialized()):
                status_condition = {
                    "being_initialized" : False,
                    "initialized" : False
                }
            else:
                if (not plnr.shutdown_planner()):
                    abort(500, "Unexpected planner shutdown failure")
                else:
                    status_condition = {
                        "being_initialized" : False,
                        "initialized" : False
                    }
        else:
            abort(400, "Unknown post command " + action)
        
        
    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))
    
    response.content_type = 'application/json'
    return status_condition
    
@get("/api/%s/lfp/device_views" % VERSION)
@thread_lock
def lfp_get_device_views():
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    
    device_views = {}
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    try:
        device_views = plnr.get_device_views()
    
        json_result = {
           "views" : []
        }
        
        for view_id in device_views:
            view_info = plnr.get_device_view_info(view_id)
            json_result["views"].append({
                 "id" : view_info["id"],
                 "name" : view_info["name"]
            })
    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result

@get("/api/%s/lfp/device_views/<view_id:int>" % VERSION)
@thread_lock
def lfp_device_view(view_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    
    device_view = {}
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    if (not plnr.is_legal_device_view_id(view_id)):
        abort(400, "Illegal view ID " + str(view_id))

    try:
        device_view =  plnr.get_device_view(view_id)

    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return device_view


@get("/api/%s/lfp/device_views/<view_id:int>/layers" % VERSION)
@thread_lock
def lfp_get_view_layers(view_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    
    json_result = {}
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    try:

        layers = plnr.get_device_view_layers(view_id)

        json_result = {
           "layers" : []
        }
        
        for layer_id in layers:
            view_info = plnr.get_device_view_layer_info(view_id, layer_id)
    #        json_result["views"].append({
    #             "id" : view_info["id"],
    #             "name" : view_info["name"]
    #        })

    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result

@get("/api/%s/lfp/device_views/<view_id:int>/layers/<layer_id:int>" % VERSION)
@thread_lock
def lfp_get_layers(view_id, layer_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    
    json_result = {}
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    try:
        json_result = plnr.get_device_view_layer(view_id, layer_id)
        
    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result

@get("/api/%s/lfp/device_locations" % VERSION)
@thread_lock
def lfp_get_device_locations():
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")


    try:

        types = request.query.getall('type')
        view_str = request.query.get('view', None)
        layer_str = request.query.get('layer', None)

        if ((len(types) > 0) and (not view_str is None)):
            abort(400, "Cannot supply type and view")
        if ((not view_str is None) and (layer_str is None)):
            abort(400, "View must be supplied with layer")

            
        if (len(types) > 0):
            for type in types:
                if (not plnr.is_legal_block_type(type)):
                    abort(400, "Illegal type " + type)
            loc_ids = plnr.get_device_locations(types)
        elif (not view_str is None):
            view = int(view_str)
            if (not plnr.is_legal_device_view_id(view)):
                abort(400, "Illegal view ID " + str(view))
            abort(500, "API not implemented")
        else:
            # Return all locations
            loc_ids = plnr.get_device_locations()

        json_result = {
           "locations" : []
        }
        
        for dev_loc in loc_ids:
            loc_info = plnr.get_device_location_info(dev_loc)
            json_result["locations"].append({
                 "id" : loc_info["id"],
                 "name" : loc_info["name"]
            })

    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result


@get("/api/%s/lfp/device_locations/<dev_loc_id:int>" % VERSION)
@thread_lock
def lfp_get_device_location_info(dev_loc_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    if (not plnr.is_legal_device_location_id(dev_loc_id)):
        abort(400, "Illegal location ID " + str(dev_loc_id))


    try:

        json_result = plnr.get_device_location_info(dev_loc_id)

    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result

@get("/api/%s/lfp/blocks" % VERSION)
@thread_lock
def lfp_get_blocks():
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    
    json_result = {}
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    try:

        types = request.query.getall('type')
        view_str = request.query.get('view', None)

        if ((len(types) > 0) and (not view_str is None)):
            abort(400, "Cannot supply type and view")
            
        if (len(types) > 0):
            for type in types:
                if (not plnr.is_legal_block_type(type)):
                    abort(400, "Illegal type " + type)
            blocks = plnr.get_blocks(types)
        elif (not view_str is None):
            view = int(view_str)
            if (not plnr.is_legal_device_view_id(view)):
                abort(400, "Illegal view ID " + str(view))
            blocks = plnr.get_block_ids_for_view(view)
        else:
            blocks = plnr.get_blocks()
    
        json_result = {
            "blocks" : [],
            "success": True,
            "message": ""
        }
        
        for block_id in blocks:
            block_info = plnr.get_block_info(block_id)
            json_result["blocks"].append({
                 "id" : block_info["id"],
                 "text" : block_info["name"],
                 "leaf" : True
            })
    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result

@get("/api/%s/lfp/blocks/<block_id:int>" % VERSION)
@thread_lock
def lfp_get_block_info(block_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    if (not plnr.is_legal_block_id(block_id)):
        abort(400, "Illegal block ID " + str(block_id))

    json_result = {}
    
    try:
        json_result = plnr.get_block_info(block_id)
    
    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    response.content_type = 'application/json'
    return json_result

@post("/api/%s/lfp/blocks/<block_id:int>" % VERSION)
@thread_lock
def lfp_perform_block_action(block_id):
    """
    Performs an action on a block. Available actions
    are 'use' to place a block at a given region of
    locations and 'unuse' to unplace a block
    """
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd
    
    status = {}
    success = False
    
    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    try:

        action = request.forms.get('action',None)
        locations_str = request.forms.getall('location')
        locations = list(map(int, locations_str))
        
        if (len(locations) == 0):
            abort(400, "No location arguments provided")
            
        if (not plnr.is_legal_block_id(block_id)):
            abort(400, "Illegal block ID " + str(block_id))
            
        for loc_id in locations:
            if (not plnr.is_legal_device_location_id(loc_id)):
                abort(400, "Illegal location ID " + str(loc_id))
        
        if (action == "place"):
            response.content_type = 'application/json'
            success = plnr.place_design_block(block_id, locations)
        elif (action == "unplace"):
            response.content_type = 'application/json'
            plnr.unplace_design_block(block_id)
            success = True
        elif (action == "try"):
            response.content_type = 'application/json'
            success = plnr.check_device_locations_satisfies_design_block(block_id, locations)
        else:
            abort(404, "Unknown post command " + action)
    except RuntimeError as e:
        abort(500, "Internal Error: " + str(e))

    status["success"] = success
    
    return status

@get("/api/%s/lfp/pcells" % VERSION)
@thread_lock
def lfp_get_pcells(view_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    abort(400, "API not implemented")

@get("/api/%s/lfp/pcells/<pcell_id:int>" % VERSION)
@thread_lock
def lfp_get_pcell_info(pcell_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    abort(400, "API not implemented")

@post("/api/%s/lfp/pcells/<pcell_id:int>" % VERSION)
@thread_lock
def lfp_perform_pcell_action(pcell_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    abort(400, "API not implemented")

@get("/api/%s/lfp/pcell_locations" % VERSION)
@thread_lock
def lfp_get_pcell_locations(view_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    abort(400, "API not implemented")

@get("/api/%s/lfp/pcell_locationss/<pcell_loc_id:int>" % VERSION)
@thread_lock
def lfp_get_pcell_location_info(pcell_loc_id):
    from quartus import dll_loader
    dll_loader.load('sys_plnr_plnr')
    dll_loader.load('comp_qhd_qhd')
    from quartus import plnr
    from quartus import qhd

    if (not qhd.is_project_open()):
        abort(404, "Project not opened")
    
    if (not plnr.is_initialized()):
        abort(404, "Planner not initialized")

    abort(400, "API not implemented")
