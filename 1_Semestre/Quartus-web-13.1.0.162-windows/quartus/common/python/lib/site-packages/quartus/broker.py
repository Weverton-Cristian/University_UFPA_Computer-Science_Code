# Copyright 2013 Altera Corporation.
# $Header: //acds/rel/13.1/quartus/ccl/py/broker.py#1 $

"""
BrokerConnection class.
"""

__author__ = "Robert Romano"
__version__ = "$Revision: #1 $"
__date__ = "$Date: 2013/08/11 $"
__copyright__ = "Copyright 2013 Altera Corporation."


import os
import json
import requests
from urllib.parse import urljoin

from quartus import cloud


class BrokerConnection(object):
    """
    Represents an interface to a 'broker' server at the user's site
    that can relay information about clients and servers. 
    """
    def __init__(self):
        self.broker_url = os.environ.get("DESIGN_BROKER")
        self.token = None
        self.id = None
        self.headers = { 'content-type' : 'application/json' }

    def set_broker(self, broker_url):
        """
        Set broker only if not already set
        """
        self.broker_url = broker_url

    def login(self, username='testuser', password='testuser', token=None):
        if self.broker_url and not token:
            # Login to get valid auth token
            url = urljoin(self.broker_url, '/api-token-auth/login/')
            print("Logging in to broker %s" % self.broker_url)      
            form = {
                'username' : username,
                'password' : password,
                }

            try:
                r = requests.post(url, data=json.dumps(form), headers=self.headers)
                try:
                    token = r.json().get('token', None)
                    self.set_token(token)
                    print("Successful login.")
                except ValueError as e:
                    print("Failed. Could not get token.")
                    self.broker_url = None
                    
            except Exception as e:
                print("Failed login. Exception: %s" % str(e))
                self.broker_url = None
        else:
            self.set_token(token)

        if self.token:
            print("Logged into broker %s using token %s" % (self.broker_url, self.token))

    def set_token(self, token):
        if token:
            self.token = token          
            self.headers['Authorization'] = "Token " + self.token

    def register(self, host, port):
        if self.broker_url:
            url = urljoin(self.broker_url, '/api/v1.0/broker/server/')
            form = {
                'revision' : "",
                'hostname' : host + ":" + str(port),
            }

            print("Registering %s:%d with broker %s" % (host, port, self.broker_url))
            print("POST: " + json.dumps(form))

            try:
                r = requests.post(url, data=json.dumps(form), headers=self.headers)
                print(r.status_code)
                if r.status_code == 201 or r.status_code == 200:
                    try:
                        self.id = r.json()['id']
                        if self.id > 0:
                            cloud.save_dfs_id(self.id)
                    except ValueError as e:
                        print("Failed to get ID from JSON:\n", r.json())
                else:
                    print("Failed to register server:\n", r.json())
                        
            except Exception as e:
                print("Failed to register server. Exception: %s" % str(e))
                return

    def deregister(self):
        if self.broker_url and self.id:
            print("De-registering with broker %s" % self.broker_url)
            url = urljoin(self.broker_url, '/api/v1.0/broker/server/%d/' % self.id)         

            try:            
                r = requests.delete(url, headers=self.headers)
                print(r.status_code)                
            except Exception as e:
                print("Failed to de-register server. Exception: %s" % str(e))

    def register_project(self, revision):
        if self.broker_url and self.id:
            form = {
                'revision' : revision,
            }
            
            print("Registering project of existing server with broker %s" % self.broker_url)
            url = urljoin(self.broker_url, '/api/v1.0/broker/server/%d/' % self.id)
            try:                        
                r = requests.put(url, data=json.dumps(form), headers=self.headers)
                print(r.status_code)                
            except Exception as e:
                print("Failed to register project. Exception: %s" % str(e))
                return    


BROKER = BrokerConnection()

